// <auto-generated />
using CoTech.Bi.Entity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace CoTech.Bi.Migrations
{
    [DbContext(typeof(BiContext))]
    [Migration("20180124171237_facturas-fixes-varios")]
    partial class facturasfixesvarios
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452");

            modelBuilder.Entity("CoTech.Bi.Core.Companies.Models.CompanyEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Activity")
                        .IsRequired();

                    b.Property<string>("Color");

                    b.Property<long?>("CreatorEventId");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<long?>("ParentId");

                    b.Property<string>("PhotoUrl");

                    b.Property<string>("Url")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CreatorEventId");

                    b.HasIndex("ParentId");

                    b.HasIndex("Url")
                        .IsUnique();

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("CoTech.Bi.Core.Companies.Models.CompanyToModule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CompanyId");

                    b.Property<long>("ModuleId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Company_Has_Modules");
                });

            modelBuilder.Entity("CoTech.Bi.Core.Companies.Models.DepartmentEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<long?>("CreatorEventId");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatorEventId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("CoTech.Bi.Core.EventSourcing.Models.EventEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BodyJson")
                        .HasColumnName("Body");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("CoTech.Bi.Core.Notifications.Models.NotificationEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BodyJson")
                        .HasColumnName("Body");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<long>("SenderId");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("CoTech.Bi.Core.Notifications.Models.ReceiverEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("NotificationId");

                    b.Property<bool>("Read");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notification_Receivers");
                });

            modelBuilder.Entity("CoTech.Bi.Core.Permissions.Models.PermissionEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CompanyId");

                    b.Property<long?>("CreatorEventId");

                    b.Property<long>("RoleId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatorEventId");

                    b.HasIndex("UserId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("CoTech.Bi.Core.Permissions.Models.RootEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("RootUsers");
                });

            modelBuilder.Entity("CoTech.Bi.Core.Users.Models.UserEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("CreatorEventId");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("Lastname")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Password");

                    b.HasKey("Id");

                    b.HasIndex("CreatorEventId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Banks.Models.BankEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Account")
                        .IsRequired();

                    b.Property<string>("Bank")
                        .IsRequired();

                    b.Property<long>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<long>("CreatorId");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("RFC")
                        .IsRequired();

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Budget.Models.BudgetConceptEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("Amount");

                    b.Property<long>("BudgetId");

                    b.Property<long>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<long>("CreatorId");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<long>("ExpenseGroupId");

                    b.Property<long>("ExpenseTypeId");

                    b.HasKey("Id");

                    b.HasIndex("BudgetId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ExpenseGroupId");

                    b.HasIndex("ExpenseTypeId");

                    b.ToTable("Budget_Concepts");
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Budget.Models.BudgetEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("Amount");

                    b.Property<long>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<long>("CreatorId");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<long>("DinningRoomId");

                    b.Property<long>("ExpenseTypeId");

                    b.Property<int>("Month");

                    b.Property<int>("Type");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DinningRoomId");

                    b.HasIndex("ExpenseTypeId");

                    b.ToTable("Budgets");
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Clients.Models.ClientEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("City")
                        .IsRequired();

                    b.Property<long>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<long>("CreatorId");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<long?>("DinningRoomId");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.Property<string>("RFC")
                        .IsRequired();

                    b.Property<string>("State")
                        .IsRequired();

                    b.Property<int>("Status");

                    b.Property<string>("Tradename")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DinningRoomId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("CoTech.Bi.Modules.DinningRooms.Models.DinningRoomEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("City");

                    b.Property<long>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<long>("CreatorId");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Email");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Phone");

                    b.Property<string>("Responsable");

                    b.Property<string>("State");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatorId");

                    b.ToTable("DinningRooms");
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Expenses.Models.ExpenseEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<long>("ExpenseGroupId");

                    b.Property<string>("Observations");

                    b.Property<float>("Price");

                    b.Property<long>("ProviderId");

                    b.Property<int>("Quantity");

                    b.Property<long>("RequisitionId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ExpenseGroupId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("RequisitionId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Expenses.Models.ExpenseGroupEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CompanyId");

                    b.Property<long?>("CompanyId1");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<long>("CreatorId");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<long>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId1");

                    b.HasIndex("CreatorId");

                    b.HasIndex("TypeId");

                    b.ToTable("ExpensesGroups");
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Expenses.Models.ExpenseTypeEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CompanyId");

                    b.Property<long?>("CompanyId1");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<long>("CreatorId");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CompanyId1");

                    b.HasIndex("CreatorId");

                    b.ToTable("ExpenseTypes");
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Invoices.Models.InvoiceEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("BankId");

                    b.Property<long>("ClientId");

                    b.Property<long>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<long>("CreatorId");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<DateTime>("EndPeriodDate");

                    b.Property<string>("InvoiceCode");

                    b.Property<string>("Observations");

                    b.Property<double>("PaidAmount");

                    b.Property<DateTime>("StartPeriodDate");

                    b.Property<int>("Status");

                    b.Property<double>("Total");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Invoices.Models.InvoicePayment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<long>("CreatorId");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Folio");

                    b.Property<long>("InvoiceId");

                    b.Property<string>("Observations");

                    b.Property<double>("Payment");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("Invoice_Payments");
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Lender.Models.LenderEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("City");

                    b.Property<long>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<long>("CreatorId");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Email");

                    b.Property<int>("Increment");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.Property<string>("RFC");

                    b.Property<string>("State");

                    b.Property<int>("Status");

                    b.Property<string>("Suburb");

                    b.Property<string>("postalCode");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Lenders");
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Movement.Models.MovementEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("Amount");

                    b.Property<long>("ClientId");

                    b.Property<long>("CompanyId");

                    b.Property<string>("Concept")
                        .IsRequired();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<long>("CreatorId");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<bool>("Iva");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Movements");
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Personal.Models.PersonalEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("BirthPlace")
                        .IsRequired();

                    b.Property<string>("CURP")
                        .IsRequired();

                    b.Property<string>("Cellphone")
                        .IsRequired();

                    b.Property<string>("City")
                        .IsRequired();

                    b.Property<string>("CivilState")
                        .IsRequired();

                    b.Property<long>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<long>("CreatorId");

                    b.Property<double>("DailyIMSSSalary");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<long>("DepartmentId");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("IMSSNumber")
                        .IsRequired();

                    b.Property<int>("Infonavit");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<double>("MonthlySalary");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("OtherContact")
                        .IsRequired();

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.Property<string>("Position")
                        .IsRequired();

                    b.Property<string>("PostalCode")
                        .IsRequired();

                    b.Property<string>("RFC")
                        .IsRequired();

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("State")
                        .IsRequired();

                    b.Property<string>("Suburb")
                        .IsRequired();

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("Personal");
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Providers.Models.ProviderEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<long>("CompanyId");

                    b.Property<string>("Contact")
                        .IsRequired();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<long>("CreatorId");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.Property<string>("RFC")
                        .IsRequired();

                    b.Property<int>("Status");

                    b.Property<string>("Tradename")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Requisitions.Models.RequisitionEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ApplicationDate");

                    b.Property<DateTime?>("ApproveDate");

                    b.Property<long?>("ApproveUserId");

                    b.Property<long>("CompanyId");

                    b.Property<DateTime?>("ComprobateDate");

                    b.Property<string>("ComprobateFileUrl");

                    b.Property<long?>("ComprobateUserId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<long>("CreatorId");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<long>("DinningRoomId");

                    b.Property<string>("Keyword");

                    b.Property<long?>("LenderId");

                    b.Property<string>("MotiveSurplus");

                    b.Property<string>("PaymentMethod");

                    b.Property<float?>("Refund");

                    b.Property<long>("ResponsableId");

                    b.Property<int>("Status");

                    b.Property<float>("Total");

                    b.HasKey("Id");

                    b.HasIndex("ApproveUserId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ComprobateUserId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DinningRoomId");

                    b.HasIndex("LenderId");

                    b.HasIndex("ResponsableId");

                    b.ToTable("Requisitions");
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Requisitions.Models.RequisitionFileEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Extension");

                    b.Property<string>("Mime");

                    b.Property<string>("Name");

                    b.Property<long>("RequisitionId");

                    b.Property<string>("Uri");

                    b.HasKey("Id");

                    b.HasIndex("RequisitionId");

                    b.ToTable("Requisitions_Files");
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Sales.Models.ServiceSaleEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<long>("CreatorId");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<float>("Price");

                    b.Property<int>("Quantity");

                    b.Property<long>("SaleId");

                    b.Property<long>("ServiceId");

                    b.Property<bool>("iva");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("SaleId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Daily_Service_Sale");
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Sales.Models.SSaleEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("ClientId");

                    b.Property<long>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<long>("CreatorId");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<double>("Total");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Service_Sales");
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Services.Models.Service_Price_ClientEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("ClientId");

                    b.Property<long>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<long>("CreatorId");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<float>("Price");

                    b.Property<long>("ServiceId");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Services_Price_Clients");
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Services.Models.ServiceEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<long>("CreatorId");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("CoTech.Bi.Modules.SmallBox.Models.SmallBoxEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("Amount");

                    b.Property<long>("BankId");

                    b.Property<long?>("ClientId");

                    b.Property<long>("CompanyId");

                    b.Property<string>("Concept")
                        .IsRequired();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<long>("CreatorId");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<long?>("ProviderId");

                    b.Property<long?>("RequisitionId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("RequisitionId");

                    b.ToTable("SmallBox");
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Wer.Models.Entities.FileCompanyEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CompanyId");

                    b.Property<string>("Extension");

                    b.Property<string>("Mime");

                    b.Property<string>("Name");

                    b.Property<string>("Uri");

                    b.Property<long>("UserId");

                    b.Property<long>("WeekId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.HasIndex("WeekId");

                    b.ToTable("Wer_File_Company");
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Wer.Models.Entities.FileEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Extension");

                    b.Property<string>("Mime");

                    b.Property<string>("Name");

                    b.Property<long>("ReportId");

                    b.Property<int>("Type");

                    b.Property<string>("Uri");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("Wer_File");
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Wer.Models.Entities.GroupEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Category");

                    b.Property<long>("CompanyId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("Wer_Groups");
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Wer.Models.Entities.IOSTokenEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Token");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Wer_Token_User");
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Wer.Models.Entities.MessageEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<long>("GroupId");

                    b.Property<string>("Message");

                    b.Property<string>("Tags");

                    b.Property<long>("UserId");

                    b.Property<long>("WeekId");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.HasIndex("WeekId");

                    b.ToTable("Wer_Messages");
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Wer.Models.Entities.PartyEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Createdat");

                    b.Property<DateTime>("DateIn");

                    b.Property<DateTime?>("DateOut");

                    b.Property<long>("GroupId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("Wer_Party");
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Wer.Models.Entities.ReportEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CompanyId");

                    b.Property<string>("Financial");

                    b.Property<string>("Observation");

                    b.Property<string>("Operative");

                    b.Property<DateTime>("Updated");

                    b.Property<long>("UserId");

                    b.Property<long>("WeekId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.HasIndex("WeekId");

                    b.ToTable("Wer_Reports");
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Wer.Models.Entities.SeenReportsEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("ReportId");

                    b.Property<DateTime>("SeenAt");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.HasIndex("UserId");

                    b.ToTable("Wer_Seen_Reports");
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Wer.Models.Entities.WeekEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EndTime");

                    b.Property<DateTime>("StartTime");

                    b.HasKey("Id");

                    b.ToTable("Wer_Weeks");
                });

            modelBuilder.Entity("CoTech.Bi.Core.Companies.Models.CompanyEntity", b =>
                {
                    b.HasOne("CoTech.Bi.Core.EventSourcing.Models.EventEntity", "CreatorEvent")
                        .WithMany()
                        .HasForeignKey("CreatorEventId");

                    b.HasOne("CoTech.Bi.Core.Companies.Models.CompanyEntity", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("CoTech.Bi.Core.Companies.Models.CompanyToModule", b =>
                {
                    b.HasOne("CoTech.Bi.Core.Companies.Models.CompanyEntity", "Company")
                        .WithMany("Modules")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoTech.Bi.Core.Companies.Models.DepartmentEntity", b =>
                {
                    b.HasOne("CoTech.Bi.Core.Companies.Models.CompanyEntity", "Company")
                        .WithMany("Departments")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Core.EventSourcing.Models.EventEntity", "CreatorEvent")
                        .WithMany()
                        .HasForeignKey("CreatorEventId");
                });

            modelBuilder.Entity("CoTech.Bi.Core.EventSourcing.Models.EventEntity", b =>
                {
                    b.HasOne("CoTech.Bi.Core.Users.Models.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoTech.Bi.Core.Notifications.Models.NotificationEntity", b =>
                {
                    b.HasOne("CoTech.Bi.Core.Users.Models.UserEntity", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoTech.Bi.Core.Notifications.Models.ReceiverEntity", b =>
                {
                    b.HasOne("CoTech.Bi.Core.Notifications.Models.NotificationEntity", "Notification")
                        .WithMany("Receivers")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Core.Users.Models.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoTech.Bi.Core.Permissions.Models.PermissionEntity", b =>
                {
                    b.HasOne("CoTech.Bi.Core.Companies.Models.CompanyEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Core.EventSourcing.Models.EventEntity", "CreatorEvent")
                        .WithMany()
                        .HasForeignKey("CreatorEventId");

                    b.HasOne("CoTech.Bi.Core.Users.Models.UserEntity", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoTech.Bi.Core.Permissions.Models.RootEntity", b =>
                {
                    b.HasOne("CoTech.Bi.Core.Users.Models.UserEntity", "User")
                        .WithOne("Root")
                        .HasForeignKey("CoTech.Bi.Core.Permissions.Models.RootEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoTech.Bi.Core.Users.Models.UserEntity", b =>
                {
                    b.HasOne("CoTech.Bi.Core.EventSourcing.Models.EventEntity", "CreatorEvent")
                        .WithMany()
                        .HasForeignKey("CreatorEventId");
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Banks.Models.BankEntity", b =>
                {
                    b.HasOne("CoTech.Bi.Core.Companies.Models.CompanyEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Core.Users.Models.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Budget.Models.BudgetConceptEntity", b =>
                {
                    b.HasOne("CoTech.Bi.Modules.Budget.Models.BudgetEntity", "Budget")
                        .WithMany()
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Core.Companies.Models.CompanyEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Core.Users.Models.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Modules.Expenses.Models.ExpenseGroupEntity", "ExpenseGroup")
                        .WithMany()
                        .HasForeignKey("ExpenseGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Modules.Expenses.Models.ExpenseTypeEntity", "ExpenseType")
                        .WithMany()
                        .HasForeignKey("ExpenseTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Budget.Models.BudgetEntity", b =>
                {
                    b.HasOne("CoTech.Bi.Core.Companies.Models.CompanyEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Core.Users.Models.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Modules.DinningRooms.Models.DinningRoomEntity", "DinningRoom")
                        .WithMany()
                        .HasForeignKey("DinningRoomId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Modules.Expenses.Models.ExpenseTypeEntity", "ExpenseType")
                        .WithMany()
                        .HasForeignKey("ExpenseTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Clients.Models.ClientEntity", b =>
                {
                    b.HasOne("CoTech.Bi.Core.Companies.Models.CompanyEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Core.Users.Models.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Modules.DinningRooms.Models.DinningRoomEntity", "DinningRoom")
                        .WithMany()
                        .HasForeignKey("DinningRoomId");
                });

            modelBuilder.Entity("CoTech.Bi.Modules.DinningRooms.Models.DinningRoomEntity", b =>
                {
                    b.HasOne("CoTech.Bi.Core.Companies.Models.CompanyEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Core.Users.Models.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Expenses.Models.ExpenseEntity", b =>
                {
                    b.HasOne("CoTech.Bi.Core.Companies.Models.CompanyEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Modules.Expenses.Models.ExpenseGroupEntity", "ExpenseGroup")
                        .WithMany()
                        .HasForeignKey("ExpenseGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Modules.Providers.Models.ProviderEntity", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Modules.Requisitions.Models.RequisitionEntity", "Requisition")
                        .WithMany()
                        .HasForeignKey("RequisitionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Expenses.Models.ExpenseGroupEntity", b =>
                {
                    b.HasOne("CoTech.Bi.Core.Companies.Models.CompanyEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId1");

                    b.HasOne("CoTech.Bi.Core.Users.Models.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Modules.Expenses.Models.ExpenseTypeEntity", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Expenses.Models.ExpenseTypeEntity", b =>
                {
                    b.HasOne("CoTech.Bi.Core.Companies.Models.CompanyEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId1");

                    b.HasOne("CoTech.Bi.Core.Users.Models.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Invoices.Models.InvoiceEntity", b =>
                {
                    b.HasOne("CoTech.Bi.Modules.Banks.Models.BankEntity", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Modules.Clients.Models.ClientEntity", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Core.Companies.Models.CompanyEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Core.Users.Models.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Invoices.Models.InvoicePayment", b =>
                {
                    b.HasOne("CoTech.Bi.Core.Companies.Models.CompanyEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Core.Users.Models.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Modules.Invoices.Models.InvoiceEntity", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Lender.Models.LenderEntity", b =>
                {
                    b.HasOne("CoTech.Bi.Core.Companies.Models.CompanyEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Core.Users.Models.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Movement.Models.MovementEntity", b =>
                {
                    b.HasOne("CoTech.Bi.Modules.Clients.Models.ClientEntity", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Core.Companies.Models.CompanyEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Core.Users.Models.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Personal.Models.PersonalEntity", b =>
                {
                    b.HasOne("CoTech.Bi.Core.Companies.Models.CompanyEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Core.Users.Models.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Core.Companies.Models.DepartmentEntity", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Core.Users.Models.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Providers.Models.ProviderEntity", b =>
                {
                    b.HasOne("CoTech.Bi.Core.Companies.Models.CompanyEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Core.Users.Models.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Requisitions.Models.RequisitionEntity", b =>
                {
                    b.HasOne("CoTech.Bi.Core.Users.Models.UserEntity", "ApproveUser")
                        .WithMany()
                        .HasForeignKey("ApproveUserId");

                    b.HasOne("CoTech.Bi.Core.Companies.Models.CompanyEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Core.Users.Models.UserEntity", "ComprobateUSer")
                        .WithMany()
                        .HasForeignKey("ComprobateUserId");

                    b.HasOne("CoTech.Bi.Core.Users.Models.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Modules.DinningRooms.Models.DinningRoomEntity", "DinningRoom")
                        .WithMany()
                        .HasForeignKey("DinningRoomId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Modules.Lender.Models.LenderEntity", "Lender")
                        .WithMany()
                        .HasForeignKey("LenderId");

                    b.HasOne("CoTech.Bi.Core.Users.Models.UserEntity", "Responsable")
                        .WithMany()
                        .HasForeignKey("ResponsableId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Requisitions.Models.RequisitionFileEntity", b =>
                {
                    b.HasOne("CoTech.Bi.Modules.Requisitions.Models.RequisitionEntity", "Requisition")
                        .WithMany()
                        .HasForeignKey("RequisitionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Sales.Models.ServiceSaleEntity", b =>
                {
                    b.HasOne("CoTech.Bi.Core.Companies.Models.CompanyEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Core.Users.Models.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Modules.Sales.Models.SSaleEntity", "Sale")
                        .WithMany()
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Modules.Services.Models.ServiceEntity", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Sales.Models.SSaleEntity", b =>
                {
                    b.HasOne("CoTech.Bi.Modules.Clients.Models.ClientEntity", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Core.Companies.Models.CompanyEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Core.Users.Models.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Services.Models.Service_Price_ClientEntity", b =>
                {
                    b.HasOne("CoTech.Bi.Modules.Clients.Models.ClientEntity", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Core.Companies.Models.CompanyEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Core.Users.Models.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Modules.Services.Models.ServiceEntity", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Services.Models.ServiceEntity", b =>
                {
                    b.HasOne("CoTech.Bi.Core.Companies.Models.CompanyEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Core.Users.Models.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoTech.Bi.Modules.SmallBox.Models.SmallBoxEntity", b =>
                {
                    b.HasOne("CoTech.Bi.Modules.Banks.Models.BankEntity", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Modules.Clients.Models.ClientEntity", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("CoTech.Bi.Core.Companies.Models.CompanyEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Core.Users.Models.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Modules.Providers.Models.ProviderEntity", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId");

                    b.HasOne("CoTech.Bi.Modules.Requisitions.Models.RequisitionEntity", "Requisition")
                        .WithMany()
                        .HasForeignKey("RequisitionId");
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Wer.Models.Entities.FileCompanyEntity", b =>
                {
                    b.HasOne("CoTech.Bi.Core.Companies.Models.CompanyEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Core.Users.Models.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Modules.Wer.Models.Entities.WeekEntity", "Week")
                        .WithMany()
                        .HasForeignKey("WeekId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Wer.Models.Entities.FileEntity", b =>
                {
                    b.HasOne("CoTech.Bi.Modules.Wer.Models.Entities.ReportEntity", "Report")
                        .WithMany("Files")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Wer.Models.Entities.GroupEntity", b =>
                {
                    b.HasOne("CoTech.Bi.Core.Companies.Models.CompanyEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Core.Users.Models.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Wer.Models.Entities.IOSTokenEntity", b =>
                {
                    b.HasOne("CoTech.Bi.Core.Users.Models.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Wer.Models.Entities.MessageEntity", b =>
                {
                    b.HasOne("CoTech.Bi.Modules.Wer.Models.Entities.GroupEntity", "Group")
                        .WithMany("MessagesList")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Core.Users.Models.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Modules.Wer.Models.Entities.WeekEntity", "Week")
                        .WithMany()
                        .HasForeignKey("WeekId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Wer.Models.Entities.PartyEntity", b =>
                {
                    b.HasOne("CoTech.Bi.Modules.Wer.Models.Entities.GroupEntity", "Group")
                        .WithMany("UsersList")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Core.Users.Models.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Wer.Models.Entities.ReportEntity", b =>
                {
                    b.HasOne("CoTech.Bi.Core.Companies.Models.CompanyEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Core.Users.Models.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Modules.Wer.Models.Entities.WeekEntity", "Week")
                        .WithMany()
                        .HasForeignKey("WeekId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoTech.Bi.Modules.Wer.Models.Entities.SeenReportsEntity", b =>
                {
                    b.HasOne("CoTech.Bi.Modules.Wer.Models.Entities.ReportEntity", "Report")
                        .WithMany("Seen")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoTech.Bi.Core.Users.Models.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
